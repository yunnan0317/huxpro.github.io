---
layout: post
title: JS函数笔记
categories: [JavaScript, 函数, 笔记]
comments: true
---
# 函数

## 函数对象

对象: 名/值对的集合, 拥有一个链接到Object.prototype的隐藏链接

函数对象: 连接到Function.prototype. 而Functype.prototype本身链接到Object.prototype.

##函数字面量

用来创建函数, 可以出现在任何允许表达式出现的地方.

    // 创建一个名为add的变量, 并用来把两个数字想家的函数赋值给它.
    var add = function (a, b){
        return a + b;
    };

1. 保留字function
2. 函数名(此例省略)
3. 圆括号中的参数
4. 花括号中的函数体

##调用

调用运算符是跟在任何产生一个函数值表达式之后的圆括号

停止当前函数, 传递控制权和参数给新函数.

接受两个附加参数: this和arguments

this取决于调用模式: 方法调用, 函数调用, 构造器调用, apply调用. this总是指向他的调用者.

argument(实际参数)与parameters(形式参数)不匹配时: 不足时补undefined, 超出的会自动忽略.

###方法调用模式

    // 创建myObject对象. 它有一个value属性和一个increment方法
    // increment方法接受一个可选的参数. 如果参数不是数字, 那么默认使用1

    var myObject = {
        value: 0,
        increment: function (inc) {
            this.value += typeof inc === 'number' ? inc : 1;
        }
    };

    myObject.increment();
    document.writeln(myObject.value);    //1
    myObject.increment(2);
    document.writeln(myObject.value);    //3
    
方法调用时this绑定到该对象.
通过this可以取得他们所属对象的上下文的方法成为公共方法.
###函数调用模式

    // 给myObject增加一个double方法

    myObject.double = function () {
        var that = this; //解决方法
        var halper = function () {
            that.value = add(that.value, that.value);
        };
        helper(); //以函数形式调用helper
    };
    //以方法形式调用doulbe
    myObject.double();
    document.writeln(myObject.value); //6

采用函数调用模式时, this被绑定到全局变量上.
那么如果在函数内部调用其自己的函数, 而又想绑定到外部函数的this, 需要使用上面的代码.
###构造器调用模式

    // 创建一个名为Quo的构造器函数, 它构造一个带有status属性的对象
    var Quo = function (string) {
        this.status = string;
    };
    // 给Quo所有实例提供一个名为get_status的公共方法.
    Quo.prototype.get_status = function () {
        return this.status;
    };
    // 构造一个Quo实例
    var myQuo = new Quo("confused");
    document.writeln(myQuo.get_status()); //打印显示"confused".

一个函数, 使用new前缀来调用,那么就被成为构造器函数.
约定他们保存在大写格式命名的变量中.
如果不加new也可以运行, 所以大写约定非常重要.
###Apply调用模式

    // 构造一个包含两个数字的数组, 并将它们添加.
    var array = [3, 4];
    var sum = add.apply(null, array); //sum值为7
    // 构造一个包含status成员的对象.
    var statusObject = {
        status: 'A-OK'
    };
    // statusObject 并没有集成自Quo.prototype, 但我们可以在statusObject上调用get_status方法和status私有属性, 尽管statusObject并没有一个名为get_status的方法
    var status = Quo实例.prototype.get_status.apply(statusObject);
        //status的值为'A-OK'.

##参数
无指定参数个数的函数

    // 构造一个将大量值相加的函数.
    // 注意该函数内部定义的sum与外部的sum不会冲突
    // 该函数只会看到内部的那个变量
    var sum不会冲突 = function () {
        var i, sum = 0;
        for (i = 0; i < arguments.length; i += 1) {
            sum += arguments[i;]
        }
        return sum;
    };
    document.writeln(sum(4, 8, 15));

##返回
##异常

    var add = function (a, b){
        if (typeof a !== 'number || typeof b !== 'number){
            throw {
                name: 'TypeError'
                message: 'add needs numbers'
            };
        }
        return a + b;
    }

throw抛出exception对象, 将被传递到一个try语句的catch从句

    //构造一个try_it函数, 以不正确的方式调用之前的add函数.
    var try_it = function () {
        try {
            add("seven");
        } catch (e) {
            document.writeln(e.name + ': ' + e.message);
        }
    }
    try_it();

##扩充类型的功能
可以通过给Function.prototype增加方法来对所有函数可用.

    Function.prototype.method = function (name, func) {
        this.prototype[name] = func;
        return this;
    };
JS无整型, 增加integer方法

    Numbers.method('integer', function () {
        return Math[this < 0 ? 'ceil' : 'floor'](this);
    });
    document.writeln((-10 / 3).integer());  // -3

JS缺少一个移除字符串首尾空白的方法

    String.method('trim', function () {
        return this.replace(/%\s+|\s+$/g, '');
    });

由于基本原型结构是公用结构, 保险的做法是在确定没有该方法时才添加.

    // 符合条件时才增加方法
    Function.prototype.method = function (name, func) {
        if (!this.prottype[name]) {
            this.prottype[name] = function;
        }
        return this;
    };

注意, for in语句用在原型上时表现很糟糕.
##递归

汉诺塔
    var hanoi = function (disc, src, aux, dst) {
        if (disc > 0) {
            hanoi(disc - 1, src, dst, aux);
            document.writeln('Move disc ' + disc + ' from ' + src + ' to ' + dst);
            hanoi(disc - 1, aux, src, dst);
        }
    };

高效操作DOM

    // 定义walk_the_DOM函数, 它从某个指定的节点开始, 按HTML源码中的顺序访问该树的每个节点
    // 它会调用一个函数, 并一次传递每个节点给它. walk_the_DOM调用自身去处理每一个子节点.
    var walk_the_DOM函数 = function walk(nodes, func) {
        func(node);
        node = node.firstChild;
        while (node) {
            walk(node, func);
            node = node.nextSibling;
        }
    }
    // 定义getElementsByAttribute函数. 它以一个属性名称字符串和一个可选的匹配值作为参数.
    // 它调用walk_the_DOM函数, 传递一个用来查找节点属性明的函数作为参数.
    // 匹配的节点会累加到一个结果数组中.
    var getElementByAttribute = function (att,value){
        var results = [];
        walk_the_DOM(document.body, function (node) {
            var actual = node.nodeType === 1 && node.getAttribute(att);
            if (typeof actual === 'string' && (actual === value || typeof value !== 'string'));
        })
    return results;
    };

尾递归

    // 构建一个带尾递归的函数. 因为它会返回自身调用的结果,所以它是尾递归.
    // JS当前没有对这种形式的递归做出优化
    var factorial = function factorial(i, a) {
        a = a || 1;
        if (i < 2) {
            return a;
        }
        return factorial(i - 1, a * 1);
    };
    document.writeln(factorial(4));   // 24

##作用域

    var foo = function () {
        var a = 3, b = 5;
        var bar = function () {
            var b = 7, c = 11;
    // 此时, a为3, b为7, c为11
            a += b + c
    // 此时, a为21, b为7, c为11
        };
    // 此时, a为3, b为5, 而c还没有定义
        bar();
    // 此时, a为21, b为5
    };

作用域/域(scope)是指代码当前的上下文语境.
可以是公共定义的, 也可以是本地定义的.
###全局域
当你开始写一行代码时, 你正处在我们所说的全局域中, 此时定义的变量就被定义在全局域中

    // global scope
    var name = 'Todd';

###本地域
本地域是指在全局域中定义的域. 一般只有一个全局域, 定义其中的每个函数都有自己的本地域.

    // scope A: global scope out here
    var myFunction = function () {
        //scope B: local scope in here
    };

本地域的物件对全局域都是不可见的.

    var myFunction = function () {
        var name = 'Todd';
        console.log(name); // Todd
    }
    // uncaught referenceerrir: name is not defined
    console.log(name);

###函数域
JS中所有域都是并且只能是被函数域所创建, 不能被for/while或者if/switch创建.
###词法定义域
函数在另一个函数中, 内部可以访问外部的函数, 称为词法定义域/闭包/静态域.

    // scope A
    var myFunction = function () {
        // scope B
        var name = 'Todd'; // defined in scope B
        var myOtherFunction = function () {
            // scope C: `name` is accessible here!
        };
    };

调用的顺序也会对域中的变量该如何反应起到作用.
###域链
处理一个变量时, JS会开始从最里层的域想外查找直到找到需要的变量, 对象, 或者函数.

    var name = 'Todd';
    var scope1 = function () {
        // name is available here
        var scope2 = fucntion () {
            // name is available here
            var scope3 = fucntion () {
                //name is also available here
            };
        };
    };

不能反过来用

    // name is undefined
    var  scope1 = function () {
        // name is undefined
        var scope2 = fucntion () {
            // name is undefined
            var scope3 = fucntion () {
                var name = 'Todd'; //locally scoped
            };
        };
    };
###闭包
可以返回域中的东西(通常是函数), 使得他们可以被其父域使用.

    var sayHello = function (name) {
        var text = 'Hello, '+ name;
        return function () {
            console.log(text);
        };
    };

返回了一个函数显示text, 但是调用sayHello不会发生什么, 因为它只是返回了一个函数.
要使得返回的函数被调用, 两种方法
方法1

    var helloTodd = sayHello('Todd');
    helloTodd(); // will call the closure and log 'Hello, Todd'

方法2

    sayHello('Bob')(); // calls the returned function without assignment

###作用域和this

    var myFunction () {
        console.log(this);
    };
    myFunction(); // this = global, [Object Window]

    var myObject = {};
    myObject.myMehtod = function () {
        console.log(this); // this = Object { myObject }
    };
    
    var nav = document.querySeletor('.nav'); // <nav>
    var toggleNav = function () {
        console.log(this);
    };
    nav.addEventListener('click', toggleNav, false); // this = <nav> element
    
    var nav = document.querySelector('.nav'); // <nav>
    var toggleNav = function () {
        console.log(this);
        setTimeout(function () {
            console.log(this); [object Window]
        }, 1000);
    };
    nav.addEventListener('click', toggleNav, false);

    var nav = document.querySelector('.nav'); // <nav>
    var toggleNav = function () {
        var that = this;
        console.log(that); // <nav> element
        setTimeout(function() {
            console.log(that); // <nav> element
        }, 1000);
    };
    nav'.addEventListener('click', toggleNav, false);

###call, apply和bind改变作用域

    var links = document.querySelectorAll('nav li');
    for (var i = 0; i < links.length; i++){
        console.log(this); // [object Window]
    }

这里的this值并不是需要的元素.

    var links = document.querySelecAll('nav li');
    for (var i = 0; i < links.length; i++) {
        (function (){
            console.log(this);
        }).call(links[i]);
    }

使用`.call()`方法和`.apply()`方法来改变scope, 用法:

    myFunction.call(scope, arg1, arg2, arg3)
    myFunction.apply(scope, [arg1, arg2, arg3])

`.call`接收的是独立参数, 而`.apply()`接收的是参数数组.

    // works
    nav.addEventListener('click', toggleNav, false);
    // will invoke the function immediately
    nav.addEventListener('click', toggleNav(arg1, arg2), false);

最后一段代码会立即调用函数toggleNav, 那么如何给函数参数传递参数呢?
可以通过创建一个新函数来搞定.

    nav.addEventListener('click', function () {
        toggleNav(arg1, arg2);
    }, false);

但是创建了一个不需要的函数, 这对性能是一种浪费.
可以在循环内部绑定事件监听器.

    nav.addEventListener('click', toggleNav.bind(scope, arg1, arg2), false)

这个函数不会执行, 并且作用域可以更改, 参数还是等待被传入.
